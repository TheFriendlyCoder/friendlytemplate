/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id 'friendlytemplate.java-application-conventions'
    // Needed to construct fat jars (./gradlew shadowJar)
    // output will be in ./app/build/lib/friendlytemplate.jar
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    // test coverage tool
    id 'jacoco'
    // Needed for spock framework
    id "groovy"
}

dependencies {
    implementation 'org.apache.commons:commons-text'
    implementation project(':utilities')

    // jgit dependencies
    implementation 'org.eclipse.jgit:org.eclipse.jgit:6.3.0.202209071007-r'
    //implementation 'org.eclipse.jgit:org.eclipse.jgit.archive:6.3.0.202209071007-r'
    //implementation 'org.eclipse.jgit:org.eclipse.jgit.ssh.jsch:6.3.0.202209071007-r'

    // Needed to squelch logging warnings in jgit
    implementation 'org.slf4j:slf4j-simple:2.0.3'

    // picocli dependencies for command line interface processing
    implementation 'info.picocli:picocli:4.6.3'
    annotationProcessor 'info.picocli:picocli-codegen:4.6.3'

    // yaml parser
    implementation 'org.yaml:snakeyaml:1.33'

    // library for writing declarative unit test matchers
    testImplementation 'org.hamcrest:hamcrest:2.2'

    // Spock test framework
    //implementation platform('org.apache.groovy:groovy-bom:4.0.5')
    //implementation 'org.apache.groovy:groovy'
    testImplementation platform("org.spockframework:spock-bom:2.3-groovy-4.0")
    testImplementation "org.spockframework:spock-core"
}

compileJava {
    // Enable picocli annotation processor
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

application {
    // Define the main class for the application.
    mainClass = 'friendlytemplate.app.App'
}

run {
    // Allow us to run the cli tool using ./gradlew run
    standardInput = System.in
}

shadowJar {
    archiveBaseName.set('friendlytemplate')
    // Removes the "-all" suffix on the generated jar name
    archiveClassifier.set('')
    // Used to remove the version number from the jar file name
    archiveVersion.set('')
    // Embed version information in the manifest file so it can be dynamically
    // loaded by the application at runtime
    manifest {
        attributes 'Main-Class': application.mainClass
        attributes 'Implementation-Title': project.name
        attributes 'Implementation-Version': project.version
    }
}

jar {
    manifest {
        attributes(
                'Main-Class': application.mainClass,
                'Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}
checkstyle {
    // Disable style checks on unit tests
    sourceSets = [project.sourceSets.main]
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run

    testLogging {
        // Show summary info about all tests as they are run
        events "PASSED", "SKIPPED", "FAILED"
    }

    //useJUnitPlatform()
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

// Fail the build if the coverage threshold falls below reasonable limit
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.2
            }
        }
    }
}

// to run coverage verification during the build (and fail when appropriate)
check.dependsOn jacocoTestCoverageVerification
